diff -urpN qemu-kvm-git/Makefile.objs qemu-kvm-git-netmap/Makefile.objs
--- qemu-kvm-git/Makefile.objs	2012-10-01 14:28:00.000000000 +0200
+++ qemu-kvm-git-netmap/Makefile.objs	2013-02-19 15:29:31.955797804 +0100
@@ -67,9 +67,9 @@ net-nested-y = queue.o checksum.o util.o
 net-nested-y += socket.o
 net-nested-y += dump.o
 net-nested-$(CONFIG_POSIX) += tap.o
-net-nested-$(CONFIG_LINUX) += tap-linux.o
+net-nested-$(CONFIG_LINUX) += tap-linux.o qemu-netmap.o
 net-nested-$(CONFIG_WIN32) += tap-win32.o
-net-nested-$(CONFIG_BSD) += tap-bsd.o
+net-nested-$(CONFIG_BSD) += tap-bsd.o qemu-netmap.o
 net-nested-$(CONFIG_SOLARIS) += tap-solaris.o
 net-nested-$(CONFIG_AIX) += tap-aix.o
 net-nested-$(CONFIG_HAIKU) += tap-haiku.o
diff -urpN qemu-kvm-git/hw/9pfs/virtio-9p-handle.c qemu-kvm-git-netmap/hw/9pfs/virtio-9p-handle.c
--- qemu-kvm-git/hw/9pfs/virtio-9p-handle.c	2012-10-01 14:27:55.000000000 +0200
+++ qemu-kvm-git-netmap/hw/9pfs/virtio-9p-handle.c	2013-02-19 15:29:31.955797804 +0100
@@ -20,6 +20,7 @@
 #include <sys/socket.h>
 #include <sys/un.h>
 #include "qemu-xattr.h"
+#include <fcntl.h>
 #include <unistd.h>
 #include <linux/fs.h>
 #ifdef CONFIG_LINUX_MAGIC_H
diff -urpN qemu-kvm-git/net/qemu-netmap.c qemu-kvm-git-netmap/net/qemu-netmap.c
--- qemu-kvm-git/net/qemu-netmap.c	1970-01-01 01:00:00.000000000 +0100
+++ qemu-kvm-git-netmap/net/qemu-netmap.c	2013-02-20 10:13:46.444025252 +0100
@@ -0,0 +1,478 @@
+/*
+ * netmap access for qemu (from tap-bsd.c and tap.c)
+ *
+ * Copyright (c) 2012 Luigi Rizzo
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+
+#include "qemu-common.h"
+#include "sysemu.h"
+#include "qemu-error.h"
+#include <net/if.h>
+#include <sys/mman.h>
+#include "netmap.h"
+#include "netmap_user.h"
+#include <sys/ioctl.h>
+
+#include "config-host.h"
+
+#include <sys/ioctl.h>
+#include <sys/stat.h>
+#include <sys/wait.h>
+#include <sys/socket.h>
+#include <net/if.h>
+
+#include "net.h"
+#include "sysemu.h"
+#include "qemu-char.h"
+#include "qemu-common.h"
+#include "qemu-error.h"
+
+static int nm_verbose=0;
+
+#define TAP_BUFSIZE (4096 + 65536)
+
+/*
+ * private netmap info
+ */
+struct netmap_state {
+    int fd;
+    int	memsize;
+    void *mem;
+    struct netmap_if *nifp;
+    struct netmap_ring *rx, *tx;
+    char fdname[128];	/* normally /dev/netmap */
+    char ifname[128];	/* maybe the nmreq here ? */
+    uint8_t _buf[TAP_BUFSIZE];
+};
+
+struct nm_state {
+    VLANClientState nc;
+    struct netmap_state me;
+    unsigned int read_poll;
+    unsigned int write_poll;
+};
+
+// XXX only for multiples of 64 bytes, non overlapped.
+static inline void
+pkt_copy(const void *_src, void *_dst, int l)
+{
+        const uint64_t *src = _src;
+        uint64_t *dst = _dst;
+#define likely(x)       __builtin_expect(!!(x), 1)
+#define unlikely(x)       __builtin_expect(!!(x), 0)
+        if (unlikely(l >= 1024)) {
+                bcopy(src, dst, l);
+                return;
+        }
+        for (; l > 0; l-=64) {
+                *dst++ = *src++;
+                *dst++ = *src++;
+                *dst++ = *src++;
+                *dst++ = *src++;
+                *dst++ = *src++;
+                *dst++ = *src++;
+                *dst++ = *src++;
+                *dst++ = *src++;
+        }
+}
+
+static void pkt_dump(const uint8_t *buf, int len)
+{
+// ....: .. .. .. .. .. .. .. ..  .. .. .. .. .. .. .. ..  ________ ________
+	int i;
+	char t[128];
+	char hex[] = "0123456789abcdef";
+#define P(x) ((c >= ' ' && c < 0x7f) ? c : '.')
+	fprintf(stderr, "--- %d bytes at %p\n", len, buf);
+	if (len > 160)
+		len = 160;
+	for (i = 0; i < len; i++) {
+		uint8_t c = buf[i];
+		int o = i % 16;
+		if (o == 0) {
+			if (i > 0)
+				fprintf(stderr, "%s\n", t);
+			memset(t, ' ', 79);
+			t[80] = '\0';
+			t[0] = hex[(i>>12) & 0xf];
+			t[1] = hex[(i>>8) & 0xf];
+			t[2] = hex[(i>>4) & 0xf];
+			t[3] = hex[(i>>0) & 0xf];
+			t[4] = ':';
+		}
+		t[6 + 3*o + (o >> 3)] = hex[c >> 4];
+		t[7 + 3*o + (o >> 3)] = hex[c & 0xf];
+		t[56 + o + (o >> 3)] = P(c);
+	}
+	if (i % 16 != 0)
+		fprintf(stderr, "%s\n", t);
+}
+
+#if 1 // NM_RATE
+void nm_report_name(struct nm_rate *r, char *name)
+{
+	int lim = sizeof(r->name);
+	int l = strlen(name);
+	if (l > lim - 1)
+		l = lim - 1;
+	bzero(&r->name, lim);
+	bcopy(name, r->name, l);
+}
+
+/*
+ * init or report the current receive rate
+ */
+void nm_report_rate(struct nm_rate *r, int delta)
+{
+	uint64_t cnt, us;
+	double rate;
+
+	if (delta < -1) {
+		r->delta = -delta;
+		fprintf(stderr, "%p set delta %llu\n", r, r->delta);
+		delta = -1;
+	}
+	if (delta == -1) {
+		r->prev = r->curr = 0;
+		gettimeofday(&r->t_prev, NULL);
+		return;
+	}
+	r->curr += delta;
+	cnt = r->curr - r->prev;
+	if (r->delta == 0) {
+		r->delta = 100000;
+		fprintf(stderr, "%p force delta %llu\n", r, r->delta);
+	}
+	if (cnt < r->delta)
+		return;
+	gettimeofday(&r->t_curr, NULL);
+	us = 1000000*(r->t_curr.tv_sec - r->t_prev.tv_sec) +
+		(r->t_curr.tv_usec - r->t_prev.tv_usec) + 1; /* avoid div-0 */
+	rate = cnt*1.0 / us;
+	r->t_prev = r->t_curr;
+	r->prev = r->curr;
+	fprintf(stderr, "%s delta %llu rate %8.6f Mpps\n", r->name, cnt, rate);
+}
+#endif // NM_RATE
+
+/*
+ * open a netmap device. We assume there is only one queue
+ * (which is the case for the VALE bridge).
+ */
+static int netmap_open(struct netmap_state *me)
+{
+    int fd, l, err;
+    struct nmreq req;
+
+    fprintf(stderr, "%s for %s\n", __FUNCTION__, me->ifname);
+    me->fd = fd = open(me->fdname, O_RDWR);
+    if (fd < 0) {
+	error_report("Unable to open netmap device '%s'", me->fdname);
+	return -1;
+    }
+    bzero(&req, sizeof(req));
+    strncpy(req.nr_name, me->ifname, sizeof(req.nr_name));
+    req.nr_ringid = 0;
+    req.nr_version = NETMAP_API;
+    err = ioctl(fd, NIOCGINFO, &req);
+    if (err) {
+	error_report("cannot get info on %s", me->ifname);
+	goto error;
+    }
+    l = me->memsize = req.nr_memsize;
+    err = ioctl(fd, NIOCREGIF, &req);
+    if (err) {
+	error_report("Unable to register %s", me->ifname);
+	goto error;
+    }
+
+    me->mem = mmap(0, l, PROT_WRITE | PROT_READ, MAP_SHARED, fd, 0);
+    if (me->mem == MAP_FAILED) {
+	error_report("Unable to mmap");
+	me->mem = NULL;
+	goto error;
+    }
+
+    me->nifp = NETMAP_IF(me->mem, req.nr_offset);
+    me->tx = NETMAP_TXRING(me->nifp, 0);
+    me->rx = NETMAP_RXRING(me->nifp, 0);
+    fprintf(stderr, "  %d MB at %p, tx %p rx %p slots %d\n",
+	me->memsize >> 20, me->mem, me->tx, me->rx, me->tx->num_slots);
+    return 0;
+error:
+    // testing, if name is not /dev/netmap still return ok
+    if (strcmp(me->fdname, "/dev/netmap") != 0)
+	return 0;
+    close(me->fd);
+    return -1;
+}
+
+/*
+ * XXX check whether this is necessary
+ */
+static int netmap_can_send(void *opaque)
+{
+    struct nm_state *s = opaque;
+    int ret;
+
+RATE_ME(__FUNCTION__, 1000000, 1);
+    ret = qemu_can_send_packet(&s->nc);
+    // fprintf(stderr, "%s for %s gives %d\n", __FUNCTION__, s->me.ifname, ret);
+    return ret;
+}
+
+static void netmap_send(void *opaque);
+static void netmap_writable(void *opaque);
+
+/*
+ * set the handlers for the device
+ */
+static void netmap_update_fd_handler(struct nm_state *s)
+{
+RATE_ME(__FUNCTION__, 1000000, 1);
+    // fprintf(stderr, "%s for %s\n", __FUNCTION__, s->me.ifname);
+#if 1
+    qemu_set_fd_handler2(s->me.fd,
+                         s->read_poll  ? netmap_can_send : NULL,
+                         s->read_poll  ? netmap_send     : NULL,
+                         s->write_poll ? netmap_writable : NULL,
+                         s);
+#else
+    qemu_set_fd_handler(s->me.fd,
+                         s->read_poll  ? netmap_send     : NULL,
+                         s->write_poll ? netmap_writable : NULL,
+                         s);
+#endif
+}
+
+/*
+ * prepare for reading
+ */
+static void netmap_read_poll(struct nm_state *s, int enable)
+{
+RATE_ME(__FUNCTION__, 1000000, 1);
+    if (nm_verbose)
+	fprintf(stderr, "%s for %s\n", __FUNCTION__, s->me.ifname);
+    s->read_poll = !!enable;
+    netmap_update_fd_handler(s);
+}
+
+/*
+ * prepare for writing.
+ * But we should almost never do that with netmap.
+ */
+static void netmap_write_poll(struct nm_state *s, int enable)
+{
+RATE_ME(__FUNCTION__, 1000000, 1);
+    if (nm_verbose)
+	fprintf(stderr, "%s for %s: %s\n", __FUNCTION__, s->me.ifname,
+		enable ? "enable" : "disable");
+    s->write_poll = !!enable;
+    netmap_update_fd_handler(s);
+}
+
+static void netmap_writable(void *opaque)
+{
+    struct nm_state *s = opaque;
+
+RATE_ME(__FUNCTION__, 1000000, 1);
+    if (nm_verbose)
+	fprintf(stderr, "%s for %s\n", __FUNCTION__, s->me.ifname);
+    netmap_write_poll(s, 0);
+
+    qemu_flush_queued_packets(&s->nc);
+}
+
+/*
+ * receive from the virtual machine means pushing to the stack
+ */
+static ssize_t netmap_receive_raw(VLANClientState *nc, const uint8_t *buf, size_t size)
+{
+    struct nm_state *s = DO_UPCAST(struct nm_state, nc, nc);
+    struct netmap_ring *ring = s->me.tx;
+
+RATE_ME(__FUNCTION__, 1000000, 1);
+    if (nm_verbose) {
+	fprintf(stderr, "TX %s for %s size %d at %p\n",
+	    __FUNCTION__, s->me.ifname, (int)size, buf);
+	pkt_dump(buf, size);
+    }
+    if (ring) {
+	if (ring->avail == 0) { // cannot write
+RATE_ME( "rx_raw cannot write", 1000000, 1);
+	    if (nm_verbose)
+		fprintf(stderr, "cannot write, set poll\n");
+	    netmap_write_poll(s, 1);
+	    return 0;
+	}
+	uint32_t i = ring->cur;
+	uint32_t idx = ring->slot[i].buf_idx;
+	uint8_t *dst = (u_char *)NETMAP_BUF(ring, idx);
+	ring->slot[i].len = size;
+	pkt_copy(buf, dst, size);
+	ring->cur = NETMAP_RING_NEXT(ring, i);
+	ring->avail--;
+RATE_ME( "rx_raw written", 1000000, 1);
+	if (nm_verbose)
+	    fprintf(stderr, "written %d at %d, avail %d\n",
+		(int)size, ring->cur, ring->avail);
+        // netmap_write_poll(s, 0); // XXX lr 20120607
+    }
+    return size;
+}
+
+/*
+ * complete a previous send
+ */
+static void netmap_send_completed(VLANClientState *nc, ssize_t len)
+{
+    struct nm_state *s = DO_UPCAST(struct nm_state, nc, nc);
+    struct netmap_ring *ring = s->me.rx;
+    int i = ring->cur;
+
+RATE_ME(__FUNCTION__, 1000000, 1);
+    if (nm_verbose)
+        fprintf(stderr, "RXok %s for %s cur %d avail %d\n",
+		__FUNCTION__, s->me.ifname, ring->cur, ring->avail);
+    ring->cur = NETMAP_RING_NEXT(ring, i);
+    ring->avail--;
+    netmap_read_poll(s, 1); // XXX only if avail == 0 ?
+}
+
+/*
+ * there is traffic available from the network, try to send it up.
+ */
+static void netmap_send(void *opaque)
+{
+    struct nm_state *s = opaque;
+    static int sent_max = 0;
+    int sent = 0;
+    struct netmap_ring *ring = s->me.rx;
+
+RATE_ME(__FUNCTION__, 1000000, 1);
+    if (nm_verbose)
+        fprintf(stderr, "RX %s for %s cur %d avail %d\n",
+		__FUNCTION__, s->me.ifname, ring->cur, ring->avail);
+    while (ring->avail > 0 && qemu_can_send_packet(&s->nc) ) {
+	uint32_t i = ring->cur;
+	uint32_t idx = ring->slot[i].buf_idx;
+	uint8_t *src = (u_char *)NETMAP_BUF(ring, idx);
+	int size = ring->slot[i].len;
+	/* XXX is this a busy wait loop ? */
+        size = qemu_send_packet_async(&s->nc, src, size, netmap_send_completed);
+	if (size == 0) {
+	    if (nm_verbose)
+		fprintf(stderr, "RX %d -> to host blocking\n", ring->cur);
+	    netmap_read_poll(s, 0);
+	    return;
+	}
+	// fprintf(stderr, "RX %d -> to host was successful\n", ring->cur);
+	ring->cur = NETMAP_RING_NEXT(ring, i);
+	ring->avail--;
+	sent++;
+    }
+    if (sent > sent_max) {
+	fprintf(stderr, "%s burst of %d\n", __FUNCTION__, sent);
+	sent_max = sent;
+    }
+    netmap_read_poll(s, 1); // XXX only if avail == 0 ?
+}
+
+
+/*
+ * flush and close
+ */
+static void netmap_cleanup(VLANClientState *nc)
+{
+    struct nm_state *s = DO_UPCAST(struct nm_state, nc, nc);
+
+    fprintf(stderr, "%s for %s\n", __FUNCTION__, s->me.ifname);
+    qemu_purge_queued_packets(nc);
+
+    netmap_read_poll(s, 0);
+    netmap_write_poll(s, 0);
+    close(s->me.fd);
+
+    s->me.fd = -1;
+}
+
+static void netmap_poll(VLANClientState *nc, bool enable)
+{
+    struct nm_state *s = DO_UPCAST(struct nm_state, nc, nc);
+
+RATE_ME(__FUNCTION__, 1000000, 1);
+    if (nm_verbose)
+	fprintf(stderr, "PPP %s for %s\n", __FUNCTION__, s->me.ifname);
+    netmap_read_poll(s, enable);
+    netmap_write_poll(s, enable);
+}
+
+
+/* fd support */
+
+static NetClientInfo net_netmap_info = {
+    .type = NET_CLIENT_TYPE_NETMAP,
+    .size = sizeof(struct nm_state),
+    .receive = netmap_receive_raw,
+//    .receive_raw = netmap_receive_raw,
+//    .receive_iov = netmap_receive_iov,
+    .poll = netmap_poll,
+    .cleanup = netmap_cleanup,
+};
+
+/* the external calls */
+
+/*
+ * net_init_netmap() is called from the outside, this is why we need
+ * a prototype. Should try to open the device, and if successful
+ * also qemu_new_net_client()
+ *
+ * opts are the command line options ?)
+ * name is passed with -net netmap,name=...
+ * vlan is ...
+ * mon is ...
+ *
+ * We need to be sure it can be opened before calling qemu_new_net_client
+ */
+int net_init_netmap(QemuOpts *opts, Monitor *mon, const char *name, VLANState *vlan);
+int net_init_netmap(QemuOpts *opts, Monitor *mon, const char *name, VLANState *vlan)
+{
+    VLANClientState *nc;
+    struct netmap_state me;
+    struct nm_state *s;
+
+    fprintf(stderr, "=== %s for %s vlan %p\n", __FUNCTION__, name, vlan);
+    /* force a default name */
+    if (!qemu_opt_get(opts, "ifname"))
+        qemu_opt_set(opts, "ifname", "vale0");
+    pstrcpy(me.fdname, sizeof(me.fdname), "/dev/netmap");
+    pstrcpy(me.ifname, sizeof(me.ifname), qemu_opt_get(opts, "ifname"));
+    if (netmap_open(&me))
+	return -1;
+
+    /* create the object -- use name or ifname ? */
+    nc = qemu_new_net_client(&net_netmap_info, vlan, NULL, "netmap", name);
+    s = DO_UPCAST(struct nm_state, nc, nc);
+    s->me = me;
+    netmap_read_poll(s, 1);
+
+    return 0;
+}
diff -urpN qemu-kvm-git/net/tap.h qemu-kvm-git-netmap/net/tap.h
--- qemu-kvm-git/net/tap.h	2012-10-01 14:28:00.000000000 +0200
+++ qemu-kvm-git-netmap/net/tap.h	2013-02-19 15:29:31.955797804 +0100
@@ -32,6 +32,10 @@
 #define DEFAULT_NETWORK_SCRIPT "/etc/qemu-ifup"
 #define DEFAULT_NETWORK_DOWN_SCRIPT "/etc/qemu-ifdown"
 
+#if 1 // DEV_NETMAP
+int net_init_netmap(QemuOpts *opts, Monitor *mon, const char *name, VLANState *vlan);
+#endif // DEV_NETMAP
+
 int net_init_tap(QemuOpts *opts, Monitor *mon, const char *name, VLANState *vlan);
 
 int tap_open(char *ifname, int ifname_size, int *vnet_hdr, int vnet_hdr_required);
diff -urpN qemu-kvm-git/net.c qemu-kvm-git-netmap/net.c
--- qemu-kvm-git/net.c	2012-10-01 14:27:54.000000000 +0200
+++ qemu-kvm-git-netmap/net.c	2013-02-20 09:56:39.514047933 +0100
@@ -938,6 +938,22 @@ static const struct {
         },
     },
 #endif
+
+#if 1 // DEV_NETMAP 
+    [NET_CLIENT_TYPE_NETMAP] = {
+        .type = "netmap",
+        .init = net_init_netmap,
+        .desc = {
+            NET_COMMON_PARAMS_DESC,
+            {
+                .name = "ifname",
+                .type = QEMU_OPT_STRING,
+                .help = "interface name",
+            },
+        },
+    },
+#endif // DEV_NETMAP
+
     [NET_CLIENT_TYPE_TAP] = {
         .type = "tap",
         .init = net_init_tap,
@@ -1104,6 +1120,7 @@ int net_client_init(Monitor *mon, QemuOp
 
     if (is_netdev) {
         if (strcmp(type, "tap") != 0 &&
+            strcmp(type, "netmap") != 0 &&
 #ifdef CONFIG_NET_BRIDGE
             strcmp(type, "bridge") != 0 &&
 #endif
@@ -1392,6 +1409,7 @@ void net_check_clients(void)
             case NET_CLIENT_TYPE_TAP:
             case NET_CLIENT_TYPE_SOCKET:
             case NET_CLIENT_TYPE_VDE:
+            case NET_CLIENT_TYPE_NETMAP:
                 has_host_dev = 1;
                 break;
             default: ;
diff -urpN qemu-kvm-git/net.h qemu-kvm-git-netmap/net.h
--- qemu-kvm-git/net.h	2012-10-01 14:27:52.000000000 +0200
+++ qemu-kvm-git-netmap/net.h	2013-02-19 15:29:31.955797804 +0100
@@ -38,6 +38,7 @@ typedef enum {
     NET_CLIENT_TYPE_VDE,
     NET_CLIENT_TYPE_DUMP,
     NET_CLIENT_TYPE_BRIDGE,
+    NET_CLIENT_TYPE_NETMAP,	// XXX lr 20120528
 
     NET_CLIENT_TYPE_MAX
 } net_client_type;
diff -urpN qemu-kvm-git/qemu-common.h qemu-kvm-git-netmap/qemu-common.h
--- qemu-kvm-git/qemu-common.h	2012-10-01 14:28:00.000000000 +0200
+++ qemu-kvm-git-netmap/qemu-common.h	2013-02-19 15:29:31.955797804 +0100
@@ -38,6 +38,30 @@ typedef struct Monitor Monitor;
 #include <signal.h>
 #include <glib.h>
 
+#ifndef RATE_ME
+/*
+ * XXX the following routine is used to compute average rates.
+ */
+struct nm_rate {
+        uint64_t prev, curr, delta;
+        struct timeval t_prev, t_curr;
+        char name[128];
+};
+
+/* report. Delta = -1 resets the count, delta < -1 sets delta */
+void nm_report_rate(struct nm_rate *r, int delta);
+void nm_report_name(struct nm_rate *r, char *name);
+
+#define RATE_ME(_nm, _de, _inc)                         \
+    do { static struct nm_rate __r;                     \
+        if (__r.delta == 0) {                           \
+                __r.delta = _de;                        \
+                strcpy(__r.name, _nm);                \
+        }                                               \
+        nm_report_rate(&__r, _inc);                    \
+    } while (0)
+
+#endif /* RATE_ME */
 #ifdef _WIN32
 #include "qemu-os-win32.h"
 #endif
