From d123fc1ea5f16d2334d5ac88134175f32cd4039a Mon Sep 17 00:00:00 2001
From: Juri Lelli <juri.lelli@gmail.com>
Date: Mon, 15 Oct 2012 18:19:40 -0700
Subject: [PATCH 35/48] sched: remove dlo_mask arg in cpudl_find

cpudl_find makes no use of dlo_mask argument, so remove it.
---
 kernel/sched/cpudl.c |    4 ++--
 kernel/sched/cpudl.h |    4 ++--
 kernel/sched/dl.c    |    5 ++---
 3 files changed, 6 insertions(+), 7 deletions(-)

diff --git a/kernel/sched/cpudl.c b/kernel/sched/cpudl.c
index 564017e..ac4f746 100644
--- a/kernel/sched/cpudl.c
+++ b/kernel/sched/cpudl.c
@@ -98,8 +98,8 @@ static inline int cpudl_maximum(struct cpudl *cp)
  *
  * Returns: int - best CPU (heap maximum if suitable)
  */
-int cpudl_find(struct cpudl *cp, struct cpumask *dlo_mask,
-		struct task_struct *p, struct cpumask *later_mask)
+int cpudl_find(struct cpudl *cp, struct task_struct *p,
+	       struct cpumask *later_mask)
 {
 	int best_cpu = -1;
 	const struct sched_dl_entity *dl_se = &p->dl;
diff --git a/kernel/sched/cpudl.h b/kernel/sched/cpudl.h
index 7f93e64..a202789 100644
--- a/kernel/sched/cpudl.h
+++ b/kernel/sched/cpudl.h
@@ -20,8 +20,8 @@ struct cpudl {
 
 
 #ifdef CONFIG_SMP
-int cpudl_find(struct cpudl *cp, struct cpumask *dlo_mask,
-		struct task_struct *p, struct cpumask *later_mask);
+int cpudl_find(struct cpudl *cp, struct task_struct *p,
+	       struct cpumask *later_mask);
 void cpudl_set(struct cpudl *cp, int cpu, u64 dl, int is_valid);
 int cpudl_init(struct cpudl *cp);
 void cpudl_cleanup(struct cpudl *cp);
diff --git a/kernel/sched/dl.c b/kernel/sched/dl.c
index c9300d8..afa6500 100644
--- a/kernel/sched/dl.c
+++ b/kernel/sched/dl.c
@@ -915,7 +915,7 @@ static void check_preempt_equal_dl(struct rq *rq, struct task_struct *p)
 	 * let's hope p can move out.
 	 */
 	if (rq->curr->nr_cpus_allowed == 1 ||
-	    cpudl_find(&rq->rd->cpudl, rq->rd->dlo_mask, rq->curr, NULL) == -1)
+	    cpudl_find(&rq->rd->cpudl, rq->curr, NULL) == -1)
 		return;
 
 	/*
@@ -923,7 +923,7 @@ static void check_preempt_equal_dl(struct rq *rq, struct task_struct *p)
 	 * see if it is pushed or pulled somewhere else.
 	 */
 	if (p->nr_cpus_allowed != 1 &&
-	    cpudl_find(&rq->rd->cpudl, rq->rd->dlo_mask, p, NULL) != -1)
+	    cpudl_find(&rq->rd->cpudl, p, NULL) != -1)
 		return;
 
 	resched_task(rq->curr);
@@ -1133,7 +1133,6 @@ static int find_later_rq(struct task_struct *task)
 		return -1;
 
 	best_cpu = cpudl_find(&task_rq(task)->rd->cpudl,
-			task_rq(task)->rd->dlo_mask,
 			task, later_mask);
 	if (best_cpu == -1)
 		return -1;
-- 
1.7.9.5

