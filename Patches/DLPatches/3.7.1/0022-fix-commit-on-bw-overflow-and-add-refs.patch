From 6665b79ddd6b4f9edb9cd373d2037f64cb1f3444 Mon Sep 17 00:00:00 2001
From: Juri Lelli <juri.lelli@gmail.com>
Date: Thu, 26 Apr 2012 14:53:24 +0200
Subject: [PATCH 22/48] fix commit on bw overflow and add refs

---
 Documentation/scheduler/sched-deadline.txt |   17 +++++++++++++----
 kernel/sched/dl.c                          |   17 ++++++++++++++---
 2 files changed, 27 insertions(+), 7 deletions(-)

diff --git a/Documentation/scheduler/sched-deadline.txt b/Documentation/scheduler/sched-deadline.txt
index 35699ce..ea8477f 100644
--- a/Documentation/scheduler/sched-deadline.txt
+++ b/Documentation/scheduler/sched-deadline.txt
@@ -43,10 +43,10 @@ CONTENTS
  time instant a task (better, an instance) activates plus the relative
  deadline.
 
- The EDF algorithm selects the task with the smallest absolute deadline as
- the one to be executed first, while the CBS ensures that each task runs for
- at most its runtime every period, avoiding any interference between different
- tasks (bandwidth isolation).
+ The EDF[1] algorithm selects the task with the smallest absolute deadline as
+ the one to be executed first, while the CBS[2,3] ensures that each task runs
+ for at most its runtime every period, avoiding any interference between
+ different tasks (bandwidth isolation).
  Thanks to this feature, also tasks that do not strictly comply with the
  computational model described above can effectively use the new policy.
  IOW, there are no limitations on what kind of task can exploit this new
@@ -54,6 +54,15 @@ CONTENTS
  suited for periodic or sporadic tasks that need guarantees on their
  timing behavior, e.g., multimedia, streaming, control applications, etc.
 
+ References:
+  1 - C. L. Liu and J. W. Layland. Scheduling algorithms for multiprogram-
+      ming in a hard-real-time environment. Journal of the Association for
+      Computing Machinery, 20(1), 1973.
+  2 - L. Abeni , G. Buttazzo. Integrating Multimedia Applications in Hard
+      Real-Time Systems. Proceedings of the 19th IEEE Real-time Systems
+      Symposium, 1998. http://retis.sssup.it/~giorgio/paps/1998/rtss98-cbs.pdf
+  3 - L. Abeni. Server Mechanisms for Multimedia Applications. ReTiS Lab
+      Technical Report. http://xoomer.virgilio.it/lucabe72/pubs/tr-98-01.ps
 
 3. Bandwidth management
 =======================
diff --git a/kernel/sched/dl.c b/kernel/sched/dl.c
index 5b3b257..0d3ace5 100644
--- a/kernel/sched/dl.c
+++ b/kernel/sched/dl.c
@@ -333,10 +333,21 @@ static void replenish_dl_entity(struct sched_dl_entity *dl_se,
  * Here we check if --at time t-- an entity (which is probably being
  * [re]activated or, in general, enqueued) can use its remaining runtime
  * and its current deadline _without_ exceeding the bandwidth it is
- * assigned (function returns true if it can).
+ * assigned (function returns true if it can't). We are in fact applying
+ * one of the CBS rules: when a task wakes up, if the residual runtime
+ * over residual deadline fits within the allocated bandwidth, then we
+ * can keep the current (absolute) deadline and residual budget without
+ * disrupting the schedulability of the system. Otherwise, we should
+ * refill the runtime and set the deadline a period in the future,
+ * because keeping the current (absolute) deadline of the task would
+ * result in breaking guarantees promised to other tasks (refer to
+ * Documentation/scheduler/sched-deadline.txt for more informations).
  *
- * For this to hold, we must check if:
- *   runtime / (deadline - t) < dl_runtime / dl_period .
+ * This function returns true if:
+ *
+ *   runtime / (deadline - t) > dl_runtime / dl_period ,
+ *
+ * IOW we can't recycle current parameters.
  *
  * Notice that the bandwidth check is done against the period. For
  * task with deadline equal to period this is the same of using
-- 
1.7.9.5

