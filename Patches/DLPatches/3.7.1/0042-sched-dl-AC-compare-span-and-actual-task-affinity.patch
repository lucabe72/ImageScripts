From 141bf9e34bc120ba92545a23f73fec3d4e8a4df3 Mon Sep 17 00:00:00 2001
From: Juri Lelli <juri.lelli@gmail.com>
Date: Thu, 1 Nov 2012 16:00:54 -0700
Subject: [PATCH 42/48] sched: -dl AC, compare span and actual task affinity

This resolves a bug that caused sched_setscheduler2 to fail. We
enforce -dl tasks to have affinity equal to the cpus of the
root_domain they run on. However, we compared the span with
cpus_allowed, that is statically initialized with CPU_MASK_ALL.
We now perform an and between cpus_allowed and cpu_active_mask
to compute the actual task affinity and be able to compare this
with the span.
---
 kernel/sched/core.c |   15 ++++++++++++---
 1 file changed, 12 insertions(+), 3 deletions(-)

diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 551ba35..adb8d2c 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -4027,15 +4027,24 @@ recheck:
 #endif
 #ifdef CONFIG_SMP
 		if (dl_bandwidth_enabled() && dl_policy(policy)) {
-			const struct cpumask *span = rq->rd->span;
+			cpumask_t *span = rq->rd->span;
+			cpumask_t act_affinity;
+
+			/*
+			 * cpus_allowed mask is statically initialized with
+			 * CPU_MASK_ALL, span is instead dynamic. Here we
+			 * compute the "dynamic" affinity of a task.
+			 */
+			cpumask_and(&act_affinity, &p->cpus_allowed,
+				    cpu_active_mask);
 
 			/*
 			 * Don't allow tasks with an affinity mask smaller than
 			 * the entire root_domain to become SCHED_DEADLINE. We
 			 * will also fail if there's no bandwidth available.
 			 */
-			if (!cpumask_equal(&p->cpus_allowed, span) ||
-			    rq->rd->dl_bw.bw == 0) {
+			if (!cpumask_equal(&act_affinity, span) ||
+			    		   rq->rd->dl_bw.bw == 0) {
 				__task_rq_unlock(rq);
 				raw_spin_unlock_irqrestore(&p->pi_lock, flags);
 				return -EPERM;
-- 
1.7.9.5

